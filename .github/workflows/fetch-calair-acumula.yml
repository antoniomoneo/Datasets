name: Fetch calair acumulado (yesterday)

on:
  schedule:
    - cron: "15 7 * * *"  # 07:15 UTC ≈ 09:15 CEST
    - cron: "15 8 * * *"  # 08:15 UTC ≈ 10:15 CEST
  workflow_dispatch:

jobs:
  fetch-accumulated-yesterday:
    timeout-minutes: 130
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      YEAR: ${{ steps.date.outputs.YEAR }}
      MONTH: ${{ steps.date.outputs.MONTH }}
      DAY: ${{ steps.date.outputs.DAY }}
    steps:
      - name: Checkout default branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          ref: main

      - name: Compute yesterday in Europe/Madrid
        id: date
        run: |
          python3 - <<'PY' >> "$GITHUB_OUTPUT"
          from datetime import datetime, timedelta
          from zoneinfo import ZoneInfo
          y = (datetime.now(ZoneInfo("Europe/Madrid")) - timedelta(days=1))
          print(f"YEAR={y:%Y}")
          print(f"MONTH={y:%m}")
          print(f"DAY={y:%d}")
          PY
      - name: Fetch ult JSON (pageSize=5000)
        run: |
          set -euo pipefail
          curl -sS -L -o ult.json 'https://ciudadesabiertas.madrid.es/dynamicAPI/API/query/calair_tiemporeal_ult.json?pageSize=5000'

      - name: Generate latest.flat.csv from ult (ayer)
        run: |
          set -euo pipefail
          python3 scripts/calair_ult_filter_to_csv.py --input ult.json
        run: |
          set -euo pipefail
          mkdir -p datasets/calidad-aire
          python3 - <<'PY'
          import json, csv
          from pathlib import Path
          rows = []
          # Try to generate from acumulado if present with @graph
          try:
            data = json.load(open('calair.json','r',encoding='utf-8'))
          except Exception:
            data = None
          if isinstance(data, dict):
            graph = data.get('@graph') or data.get('graph') or []
            if isinstance(graph, list):
              for station in graph:
                if not isinstance(station, dict):
                  continue
                station_id = station.get('@id','')
                title = station.get('title','')
                relation = station.get('relation','')
                measurements = station.get('medicion', [])
                if isinstance(measurements, list):
                  for m in measurements:
                    if not isinstance(m, dict):
                      continue
                    rows.append({
                      'station_id': station_id,
                      'title': title,
                      'relation': relation,
                      'magnitud': m.get('magnitud',''),
                      'valor': m.get('valor'),
                      'fecha': m.get('fecha',''),
                    })
          out = Path('datasets/calidad-aire/latest.flat.csv')
          wrote_from_acc = False
          if rows:
            fieldnames = list(rows[0].keys())
            with out.open('w',encoding='utf-8',newline='') as f:
              w = csv.DictWriter(f, fieldnames=fieldnames)
              w.writeheader(); w.writerows(rows)
            wrote_from_acc = True
          print(f'Acumulado rows: {len(rows)}')
          PY

          # Fallback: if acumulado empty, use ult endpoint
          if ! [ -s datasets/calidad-aire/latest.flat.csv ]; then
            echo "Fallback to calair_tiemporeal_ult (yesterday)"
            python3 scripts/calair_latest_from_ult.py
          fi

      - name: Clean temp JSON
        run: rm -f ult.json || true

      - name: Commit & push if changed
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          if [ -n "$(git status --porcelain datasets/calidad-aire/latest.flat.csv)" ]; then
            git add datasets/calidad-aire/latest.flat.csv
            git commit -m "chore: calair acumulado yesterday -> latest.flat.csv [skip ci]"
            git push
          else
            echo "No changes to commit."
          fi

