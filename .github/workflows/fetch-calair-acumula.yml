name: Fetch calair acumulado (yesterday)

on:
  schedule:
    - cron: "15 7 * * *"  # 07:15 UTC ≈ 09:15 CEST
    - cron: "15 8 * * *"  # 08:15 UTC ≈ 10:15 CEST
  workflow_dispatch:

jobs:
  fetch-accumulated-yesterday:
    timeout-minutes: 130
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      YEAR: ${{ steps.date.outputs.YEAR }}
      MONTH: ${{ steps.date.outputs.MONTH }}
      DAY: ${{ steps.date.outputs.DAY }}
    steps:
      - name: Checkout default branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          ref: main

      - name: Compute yesterday in Europe/Madrid
        id: date
        run: |
          python3 - <<'PY' >> "$GITHUB_OUTPUT"
          from datetime import datetime, timedelta
          from zoneinfo import ZoneInfo
          y = (datetime.now(ZoneInfo("Europe/Madrid")) - timedelta(days=1))
          print(f"YEAR={y:%Y}")
          print(f"MONTH={y:%m}")
          print(f"DAY={y:%d}")
          PY


      - name: Fetch acumula JSON with retry and fallback days
        id: fetch
        run: |
          set -euo pipefail
          baseY='${{ steps.date.outputs.YEAR }}'
          baseM='${{ steps.date.outputs.MONTH }}'
          baseD='${{ steps.date.outputs.DAY }}'

          sudo apt-get update -y >/dev/null
          sudo apt-get install -y jq >/dev/null

          # Try yesterday, then fallback up to 5 days back until records > 0
          found=0
          selY=""; selM=""; selD=""
          for back in 0 1 2 3 4 5; do
            read Y M D <<< "$(date -d "$baseY-$baseM-$baseD -${back} day" +'%%Y %%m %%d')"
            URL="https://datos.madrid.es/egob/catalogo/300755-12751602-calidad-aire-tiempo-real-acumula.json?MES=${M}&ANO=${Y}&DIA=${D}"
            echo "Trying date ${Y}-${M}-${D}: $URL"

            ok=0
            for attempt in 1 2 3 4 5 6 7 8 9 10 11 12; do
              code=$(curl -sS -w '%{http_code}' -L -o calair.json "$URL" || echo 000)
              if [ "$code" = "200" ] && [ -s calair.json ] && jq -e . calair.json >/dev/null 2>&1; then
                total=$(jq -r 'try (.totalRecords // ."pageRecords" // (."@graph"|length) // 0) catch 0' calair.json)
                if [ "${total}" != "" ] && [ "${total}" -gt 0 ] 2>/dev/null; then
                  echo "OK on attempt $attempt with ${total} records for ${Y}-${M}-${D}"
                  ok=1
                  break
                fi
                echo "JSON present (${code}) but no records yet (total=${total})."
              fi
              echo "Not ready (code=$code). Retrying in 10 minutes..."
              sleep 600
            done

            if [ "$ok" = "1" ]; then
              selY="$Y"; selM="$M"; selD="$D"; found=1
              break
            fi
          done

          if [ "$found" != "1" ]; then
            echo "No available days with records in the last 6 days. Will fallback." >&2
          :
          fi

          # Export selected date for logs (not used elsewhere)
          echo "SELECTED_YEAR=$selY" >> "$GITHUB_OUTPUT"
          echo "SELECTED_MONTH=$selM" >> "$GITHUB_OUTPUT"
          echo "SELECTED_DAY=$selD" >> "$GITHUB_OUTPUT"

      - name: Generate latest.flat.csv
        run: |
          set -euo pipefail
          mkdir -p datasets/calidad-aire
          python3 - <<'PY'
          import json, csv
          from pathlib import Path
          rows = []
          # Try to generate from acumulado if present with @graph
          try:
            data = json.load(open('calair.json','r',encoding='utf-8'))
          except Exception:
            data = None
          if isinstance(data, dict):
            graph = data.get('@graph') or data.get('graph') or []
            if isinstance(graph, list):
              for station in graph:
                if not isinstance(station, dict):
                  continue
                station_id = station.get('@id','')
                title = station.get('title','')
                relation = station.get('relation','')
                measurements = station.get('medicion', [])
                if isinstance(measurements, list):
                  for m in measurements:
                    if not isinstance(m, dict):
                      continue
                    rows.append({
                      'station_id': station_id,
                      'title': title,
                      'relation': relation,
                      'magnitud': m.get('magnitud',''),
                      'valor': m.get('valor'),
                      'fecha': m.get('fecha',''),
                    })
          out = Path('datasets/calidad-aire/latest.flat.csv')
          wrote_from_acc = False
          if rows:
            fieldnames = list(rows[0].keys())
            with out.open('w',encoding='utf-8',newline='') as f:
              w = csv.DictWriter(f, fieldnames=fieldnames)
              w.writeheader(); w.writerows(rows)
            wrote_from_acc = True
          print(f'Acumulado rows: {len(rows)}')
          PY

          # Fallback: if acumulado empty, use ult endpoint
          if ! [ -s datasets/calidad-aire/latest.flat.csv ]; then
            echo "Fallback to calair_tiemporeal_ult (yesterday)"
            python3 scripts/calair_latest_from_ult.py
          fi

      - name: Clean temp JSON
        run: rm -f calair.json || true

      - name: Commit & push if changed
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          if [ -n "$(git status --porcelain datasets/calidad-aire/latest.flat.csv)" ]; then
            git add datasets/calidad-aire/latest.flat.csv
            git commit -m "chore: calair acumulado yesterday -> latest.flat.csv [skip ci]"
            git push
          else
            echo "No changes to commit."
          fi

